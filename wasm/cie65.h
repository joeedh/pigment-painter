#include "color.h"
namespace color::cie65 {

enum {
  DWAVELEN = 0,
  DS1 = 1, // mean spectral power
  DS2 = 2, // yellow-blue specral power, for simulating clouds
  DS3 = 3, // pink-green spectral power, for simulating water vapor and haze
  DTOT = 4
};

static float data[] = {
    300, 0.04,   0.02,   0.00,  305, 3.02,   2.26,   1.00,  310, 6.00,   4.50,   2.00,
    315, 17.80,  13.45,  3.00,  320, 29.60,  22.40,  4.00,  325, 42.45,  32.20,  6.25,
    330, 55.30,  42.00,  8.50,  335, 56.30,  41.30,  8.15,  340, 57.30,  40.60,  7.80,
    345, 59.55,  41.10,  7.25,  350, 61.80,  41.60,  6.70,  355, 61.65,  39.80,  6.00,
    360, 61.50,  38.00,  5.30,  365, 65.15,  40.20,  5.70,  370, 68.80,  42.40,  6.10,
    375, 66.10,  40.45,  4.55,  380, 63.40,  38.50,  3.00,  385, 64.60,  36.75,  2.10,
    390, 65.80,  35.00,  1.20,  395, 80.30,  39.20,  0.05,  400, 94.80,  43.40,  -1.10,
    405, 99.80,  44.85,  -0.80, 410, 104.80, 46.30,  -0.50, 415, 105.35, 45.10,  -0.60,
    420, 105.90, 43.90,  -0.70, 425, 101.35, 40.50,  -0.95, 430, 96.80,  37.10,  -1.20,
    435, 105.35, 36.90,  -1.90, 440, 113.90, 36.70,  -2.60, 445, 119.75, 36.30,  -2.75,
    450, 125.60, 35.90,  -2.90, 455, 125.55, 34.25,  -2.85, 460, 125.50, 32.60,  -2.80,
    465, 123.40, 30.25,  -2.70, 470, 121.30, 27.90,  -2.60, 475, 121.30, 26.10,  -2.60,
    480, 121.30, 24.30,  -2.60, 485, 117.40, 22.20,  -2.20, 490, 113.50, 20.10,  -1.80,
    495, 113.30, 18.15,  -1.65, 500, 113.10, 16.20,  -1.50, 505, 111.95, 14.70,  -1.40,
    510, 110.80, 13.20,  -1.30, 515, 108.65, 10.90,  -1.25, 520, 106.50, 8.60,   -1.20,
    525, 107.65, 7.35,   -1.10, 530, 108.80, 6.10,   -1.00, 535, 107.05, 5.15,   -0.75,
    540, 105.30, 4.20,   -0.50, 545, 104.85, 3.05,   -0.40, 550, 104.40, 1.90,   -0.30,
    555, 102.20, 0.95,   -0.15, 560, 100.00, 0.00,   0.00,  565, 98.00,  -0.80,  0.10,
    570, 96.00,  -1.60,  0.20,  575, 95.55,  -2.55,  0.35,  580, 95.10,  -3.50,  0.50,
    585, 92.10,  -3.50,  1.30,  590, 89.10,  -3.50,  2.10,  595, 89.80,  -4.65,  2.65,
    600, 90.50,  -5.80,  3.20,  605, 90.40,  -6.50,  3.65,  610, 90.30,  -7.20,  4.10,
    615, 89.35,  -7.90,  4.40,  620, 88.40,  -8.60,  4.70,  625, 86.20,  -9.05,  4.90,
    630, 84.00,  -9.50,  5.10,  635, 84.55,  -10.20, 5.90,  640, 85.10,  -10.90, 6.70,
    645, 83.50,  -10.80, 7.00,  650, 81.90,  -10.70, 7.30,  655, 82.25,  -11.35, 7.95,
    660, 82.60,  -12.00, 8.60,  665, 83.75,  -13.00, 9.20,  670, 84.90,  -14.00, 9.80,
    675, 83.10,  -13.80, 10.00, 680, 81.30,  -13.60, 10.20, 685, 76.60,  -12.80, 9.25,
    690, 71.90,  -12.00, 8.30,  695, 73.10,  -12.65, 8.95,  700, 74.30,  -13.30, 9.60,
    705, 75.35,  -13.10, 9.05,  710, 76.40,  -12.90, 8.50,  715, 69.85,  -11.75, 7.75,
    720, 63.30,  -10.60, 7.00,  725, 67.50,  -11.10, 7.30,  730, 71.70,  -11.60, 7.60,
    735, 74.35,  -11.90, 7.80,  740, 77.00,  -12.20, 8.00,  745, 71.10,  -11.20, 7.35,
    750, 65.20,  -10.20, 6.70,  755, 56.45,  -9.00,  5.95,  760, 47.70,  -7.80,  5.20,
    765, 58.15,  -9.50,  6.30,  770, 68.60,  -11.20, 7.40,  775, 66.80,  -10.80, 7.10,
    780, 65.00,  -10.40, 6.80,  785, 65.50,  -10.50, 6.90,  790, 66.00,  -10.60, 7.00,
    795, 63.50,  -10.15, 6.70,  800, 61.00,  -9.70,  6.40,  805, 57.15,  -9.00,  5.95,
    810, 53.30,  -8.30,  5.50,  815, 56.10,  -8.80,  5.80,  820, 58.90,  -9.30,  6.10,
    825, 60.40,  -9.55,  6.30,  830, 61.90,  -9.80,  6.50};
const int dataSize = sizeof(data) / sizeof(*data);

static const int steps = 1024;
extern float table[steps][3];
extern float used[steps];

static float frange[2];
static float range[2] = {1e17, -1e17};

static void initCie65() {
  for (int di = 0; di < dataSize; di += DTOT) {
    range[0] = std::min(range[0], data[di + DWAVELEN]);
    range[1] = std::max(range[1], data[di + DWAVELEN]);
  }

  frange[0] = waveLengthToFreq(range[0]);
  frange[1] = waveLengthToFreq(range[1]);

  int steps = 1024;

  for (int i = 0; i < steps; i++) {
    used[i] = 0.0;
  }

  for (int di = 0; di < dataSize; di += DTOT) {
    float wlen = data[di + DWAVELEN];
    float freq = waveLengthToFreq(wlen);

    // console.log(freq);
    float t = (freq - frange[0]) / (frange[1] - frange[0]);
    int ti = (int)(t * steps * 0.9999f);

    if (used[ti] == 0.0f) {
      table[ti][0] = data[di + DS1];
      table[ti][1] = data[di + DS2];
      table[ti][2] = data[di + DS3];
    } else {
      table[ti][0] += data[di + DS1];
      table[ti][1] += data[di + DS2];
      table[ti][2] += data[di + DS3];
    }

    used[ti] += 1.0f;
  }

  for (int i = 0; i < steps; i++) {
    float tot = used[i];
    if (!tot) {
      continue;
    }

    tot = 1.0f / tot;

    table[i][0] *= tot;
    table[i][1] *= tot;
    table[i][2] *= tot;
  }

  for (int i = 0; i < steps - 1; i++) {
    if (used[i + 1] || !used[i]) {
      continue;
    }

    int j = i + 1;
    while (j < steps && !used[j]) {
      j++;
    }

    if (j == steps) {
      for (j = i + 1; j < steps; j++) {
        table[j][0] = table[i][0];
        table[j][1] = table[i][1];
        table[j][2] = table[i][2];
      }

      continue;
    }

    float *a = table[i];
    float *b = table[j];

    for (int k = i + 1; k < j; k++) {
      float *item = table[k];
      float t = (k - i) / (j - i);

      for (int l = 0; l < 3; l++) {
        item[l] = a[l] + (b[l] - a[l]) * t;
      }
    }
  }
}

static const float colorTemperature = 6504;

static void getCie65(float ret[3], float freq) {
  float i = (freq - frange[0]) / (frange[1] - frange[0]);
  i = MIN(MAX(i, 0.0f), 1.0f) * 0.99999f;

  float t = i - floorf(i);

  int i1 = (int)i;
  int i2 = i1 + 1;

  if (i2 >= steps - 1) {
    ret[0] = table[i1][0];
    ret[1] = table[i1][1];
    ret[2] = table[i1][2];

    return;
  }

  ret[0] = table[i1][0] + (table[i2][0] - table[i1][0]) * t;
  ret[1] = table[i1][1] + (table[i2][1] - table[i1][1]) * t;
  ret[2] = table[i1][2] + (table[i2][2] - table[i1][2]) * t;
}

// console.log(table);
} // namespace color::cie65